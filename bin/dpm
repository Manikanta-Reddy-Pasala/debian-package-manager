#!/usr/bin/env python3
"""
Debian Package Manager - Standalone executable script
This script can be used as a standalone executable that works without system Python.
"""

import sys
import os
import subprocess
from pathlib import Path

# Add the src directory to Python path
script_dir = Path(__file__).parent.absolute()
src_dir = script_dir.parent / "src"
sys.path.insert(0, str(src_dir))

def check_privileges():
    """Check if we have the necessary privileges for package operations."""
    if os.geteuid() != 0:
        return False
    return True

def check_dependencies():
    """Check if required system dependencies are available."""
    missing_deps = []
    
    # Check for apt
    try:
        subprocess.run(['apt', '--version'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        missing_deps.append('apt')
    
    # Check for dpkg
    try:
        subprocess.run(['dpkg', '--version'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        missing_deps.append('dpkg')
    
    return missing_deps

def main():
    """Main entry point for standalone executable."""
    # Check system dependencies
    missing_deps = check_dependencies()
    if missing_deps:
        print(f"Error: Missing required system dependencies: {', '.join(missing_deps)}")
        print("Please install the missing dependencies and try again.")
        return 1
    
    # Check for operations that need root
    needs_root = len(sys.argv) > 1 and sys.argv[1] in ['install', 'remove', 'fix']
    if needs_root and not check_privileges():
        print("Warning: This operation typically requires root privileges.")
        print("You may need to run with 'sudo' for actual package operations.")
        print("Continuing in simulation mode...\n")
    
    try:
        # Import and run the CLI
        from debian_metapackage_manager.cli import main as cli_main
        return cli_main()
    except ImportError as e:
        print(f"Error: Failed to import debian_metapackage_manager: {e}")
        print("Make sure the package is properly installed or run from the project directory.")
        return 1
    except Exception as e:
        print(f"Unexpected error: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())